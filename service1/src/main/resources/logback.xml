<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!--
         规则：
            dev 开发环境： 启用实时打印日志，启用p6spy打印sql语句到控制台
            其他环境:  启用异步打印，  禁用p6spy
           %m
           输出代码中指定的消息
           %p
           输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
           %r
           输出自应用启动到输出该log信息耗费的毫秒数
           %c
           输出所属的类目，通常就是所在类的全名
           %t
           输出产生该日志事件的线程名
           %n
           输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
           %d
           输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，
           输出类似：2002年10月18日 22：10：28，921
           %l
           输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
        -->
    <springProperty scope="context" name="log.path" source="logging.file.path" defaultValue="/data/logs"/>
    <springProperty scope="context" name="spring.application.name" source="spring.application.name"/>
    <springProperty scope="context" name="spring.profiles.active" source="spring.profiles.active"/>
    <springProperty scope="context" name="common-pattern" source="logging.common-pattern"
                    defaultValue="%d{yyyy-MM-dd HH:mm:ss.SSS}:[%5p] [%t:%r] [%logger{50}.%M:%L] --> %msg%n"/>
    <springProperty scope="context" name="log.level.root" source="logging.level.root" defaultValue="INFO"/>
    <springProperty scope="context" name="log.level.nacos" source="logging.level.nacos" defaultValue="WARN"/>

    <contextName>${spring.application.name}-logback</contextName>

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <jmxConfigurator/>

    <!-- 控制台实时输出，采用高亮语法，用于开发环境 -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--            <level>${log.level.console}</level>-->
        </filter>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}:[%5p] [%t:%r] [%cyan(%logger{50}).%M:%L] --> %highlight(%msg) %n
            </pattern>
        </encoder>
    </appender>
    <!-- 控制台异步实时输出 -->
    <appender name="asyncConsoleAppender" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="consoleAppender"/>
    </appender>

    <!-- 整个项目的所有日志， 包括第三方包 -->
    <appender name="rootAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/${spring.application.name}/bus.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${spring.application.name}/%d{yyyy-MM}/bus-%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${common-pattern}</pattern>
        </encoder>
    </appender>
    <appender name="asyncRootAppender" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <appender-ref ref="rootAppender"/>
    </appender>

    <!-- 共用异常包的日志 -->
    <appender name="exceptionAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/${spring.application.name}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${spring.application.name}/%d{yyyy-MM}/error-%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${common-pattern}</pattern>
        </encoder>
    </appender>
    <appender name="asyncExceptionAppender" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <appender-ref ref="exceptionAppender"/>
    </appender>


    <springProfile name="test,prod">
        <root level="${log.level.console}">
            <appender-ref ref="asyncRootAppender"/>
        </root>

        <logger name="com.alibaba.nacos.client" level="${log.level.nacos}" additivity="false">
            <appender-ref ref="asyncRootAppender"/>
        </logger>

        <logger name="com.alibaba.nacos.client.config" level="${log.level.nacos}" additivity="false">
            <appender-ref ref="asyncRootAppender"/>
        </logger>

        <logger name="com.alibaba.nacos.client.naming" level="${log.level.nacos}" additivity="false">
            <appender-ref ref="asyncRootAppender"/>
        </logger>
    </springProfile>

    <springProfile name="dev">
        <root level="${log.level.console}">
            <appender-ref ref="consoleAppender"/>
        </root>
        <logger name="com.alibaba.nacos.client" level="${log.level.nacos}" additivity="false">
            <appender-ref ref="consoleAppender"/>
        </logger>

        <logger name="com.alibaba.nacos.client.config" level="${log.level.nacos}" additivity="false">
            <appender-ref ref="consoleAppender"/>
        </logger>

        <logger name="com.alibaba.nacos.client.naming" level="${log.level.nacos}" additivity="false">
            <appender-ref ref="consoleAppender"/>
        </logger>
    </springProfile>
</configuration>